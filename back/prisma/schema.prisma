generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @unique(map: "id_UNIQUE") @db.VarChar(45)
  email            String             @id @unique
  nickname         String             @unique
  password         String
  token            String?            @unique
  ban              Boolean            @default(false)
  withdrawal       Boolean            @default(false)
  role             Role               @default(USER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Board            Board[]
  Challenge        Challenge[]
  ChallengeComment ChallengeComment[]
  Challenger       Challenger[]
  Comment          CommentPost[]
  Profile          Profile?
  ReportPost       ReportPost[]
  VotePost         VotePost[]
}

model Profile {
  nickname      String  @id
  age           String?
  region        String?
  gender        String?
  profile_image String?
  introduce     String?
  user          User    @relation(fields: [nickname], references: [nickname])
}

model Challenge {
  id               Int                @id @default(autoincrement())
  title            String
  description      String
  goal             String
  level            String?            @default("default")
  start_date       DateTime           @db.DateTime(0)
  due_date         DateTime           @db.DateTime(0)
  proposer         String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  author           User               @relation(fields: [proposer], references: [nickname])
  ChallengeComment ChallengeComment[]
  Challenger       Challenger[]

  @@index([proposer], map: "Challenge_proposer_fkey")
}

model Challenger {
  challenge_id Int
  nickname     String
  Challenge    Challenge @relation(fields: [challenge_id], references: [id])
  User         User      @relation(fields: [nickname], references: [nickname])

  @@id([challenge_id, nickname])
  @@index([nickname], map: "Challenger_nickname_fkey")
}

model ChallengeComment {
  id           Int       @id @default(autoincrement())
  challenge_id Int
  author       String
  description  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [author], references: [nickname])
  Challenge    Challenge @relation(fields: [challenge_id], references: [id])

  @@index([author], map: "ChallengeComment_author_fkey")
  @@index([challenge_id], map: "ChallengeComment_challenge_id_fkey")
}

model Board {
  id          Int           @id @unique @default(autoincrement())
  author      String
  title       String
  description String
  view        Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [author], references: [nickname])
  Comment     CommentPost[]
  ReportPost  ReportPost[]
  VotePost    VotePost[]

  @@index([author], map: "Board_author_fkey")
}

model CommentPost {
  id          Int      @id @unique @default(autoincrement())
  author      String
  post_id     Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [author], references: [nickname])
  post        Board    @relation(fields: [post_id], references: [id])

  @@index([author], map: "CommentPost_author_fkey")
  @@index([post_id], map: "CommentPost_post_id_fkey")
}

model VotePost {
  id        Int      @id @default(autoincrement())
  voter     String
  post_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Board    @relation(fields: [post_id], references: [id])
  user      User     @relation(fields: [voter], references: [nickname])

  @@index([post_id], map: "VotePost_post_id_fkey")
  @@index([voter], map: "VotePost_voter_fkey")
}

model ReportPost {
  id          Int      @id @default(autoincrement())
  reporter    String
  post_id     Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  post        Board    @relation(fields: [post_id], references: [id])
  user        User     @relation(fields: [reporter], references: [nickname])

  @@index([post_id], map: "ReportPost_post_id_fkey")
  @@index([reporter], map: "ReportPost_reporter_fkey")
}

model SeaLevelKorea {
  year      Int   @id
  sea_level Float @db.Float
}

model EmissionCO2 {
  year  Int    @id
  World BigInt @db.UnsignedBigInt
  USA   BigInt @db.UnsignedBigInt
  EU    BigInt @db.UnsignedBigInt
  China BigInt @db.UnsignedBigInt
  Korea BigInt @db.UnsignedBigInt
}

model Temperture {
  year  Int   @id
  World Float @db.Float
  USA   Float @db.Float
  EU    Float @db.Float
  China Float @db.Float
  Korea Float @db.Float
}

enum Role {
  USER
  ADMIN
}
